{
	// Place your snippets for verilog here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"module模板(": {
		"prefix": "module",
		"body": [
			"module ${1:module_name}("
			"	clk    ,"
			"	rst_n  ,"
			"	//其他信号,举例dout"
			"	dout"
			");"
			""
			"//参数定义"
			"parameter      DATA_W =         8;"
			""
			"//输入信号定义"
			"input               clk    ;"
			"input               rst_n  ;"
			""
			"//输出信号定义"
			"output[DATA_W-1:0]  dout   ;"
			""
			"//输出信号reg定义"
			"reg   [DATA_W-1:0]  dout   ;"
			""
			"//中间信号定义"
			"reg                 signal1;"
			""
			"//组合逻辑写法"
			"always@(*)begin"
			""
			"end"
			""
			"//时序逻辑写法"
			"always@(posedge clk or negedge rst_n)begin"
			"	if(rst_n==1'b0)begin"
			""
			"	end"
			"	else begin"
			""
			"	end"
			"end"
			""
			"endmodule"
		],
		"description": "module"
	}

	"testbench模板": {
		"prefix": "test",
		"body": [
			"`timescale 1 ns/1 ns"
			""
			"module ${1:testbench_name}();"
			""
			"//时钟和复位"
			"reg clk  ;"
			"reg rst_n;"
			""
			"//uut的输入信号"
			"reg[3:0]  din0  ;"
			"reg       din1  ;"
			"......"
			""
			"//uut的输出信号"
			"wire      dout0;"
			"wire[4:0] dout1;"
			"......"
			""
			"//时钟周期，单位为ns，可在此修改时钟周期。"
			"parameter CYCLE    = 20;"
			""
			"//复位时间，此时表示复位3个时钟周期的时间。"
			"parameter RST_TIME = 3 ;"
			""
			"//待测试的模块例化"
			"${2:module_name} uut("
			"	.clk          (clk     ), "
			"	.rst_n        (rst_n   ),"
			"	.din0         (din0    ),"
			"	.din1         (din1    ),"
			"	.dout0        (dout0   ),"
			"	.dout1        (dout1   )"
			"	......"
			");"
			""
			"//生成本地时钟50M"
			"initial begin"
			"	clk = 0;"
			"	forever"
			"	#(CYCLE/2)"
			"	clk=~clk;"
			"end"
			""
			"//产生复位信号"
			"initial begin"
			"	rst_n = 1;"
			"	#2;"
			"	rst_n = 0;"
			"	#(CYCLE*RST_TIME);"
			"	rst_n = 1;"
			"end"
			""
			"//输入信号din0赋值方式"
			"initial begin"
			"	#1;"
			"	//赋初值"
			"	din0 = 0;"
			"	#(10*CYCLE);"
			"	//开始赋值"
			"end"
			""
			"//输入信号din1赋值方式"
			"initial begin"
			"	#1;"
			"	//赋初值"
			"	din1 = 0;"
			"	#(10*CYCLE);"
			"	//开始赋值"
			"end"
			""
			"endmodule"
		],
		"description": "test"
	}

	"四段式状态机": {
		"prefix": "ztj",
		"body": [
			"//四段式状态机"
			""
			"//第一段：同步时序always模块，格式化描述次态寄存器迁移到现态寄存器(不需更改）"
			"always@(posedge clk or negedge rst_n)begin"
			"if(!rst_n)begin"
			"	state_c <= IDLE;"
			"end"
			"else begin"
			"	state_c <= state_n;"
			"end"
			"end"
			""
			"//第二段：组合逻辑always模块，描述状态转移条件判断"
			"always@(*)begin"
			"case(state_c)"
			"	IDLE:begin"
			"		if(idl2s1_start)begin"
			"			state_n = S1;"
			"		end"
			"		else begin"
			"			state_n = state_c;"
			"		end"
			"		end"
			"	S1:begin"
			"		if(s12s2_start)begin"
			"			state_n = S2;"
			"		end"
			"		else begin"
			"			state_n = state_c;"
			"		end"
			"	end"
			"	S2:begin"
			"		if(s22s3_start)begin"
			"			state_n = S3;"
			"		end"
			"		else begin"
			"			state_n = state_c;"
			"		end"
			"	end"
			"	default:begin"
			"		state_n = IDLE;"
			"	end"
			"endcase"
			"end"
			"//第三段：设计转移条件"
			"assign idl2s1_start  = state_c==IDLE && $1;"
			"assign s12s2_start = state_c==S1    && $2;"
			"assign s22s3_start  = state_c==S2    && $3;"
			""
			"//第四段：同步时序always模块，格式化描述寄存器输出（可有多个输出）"
			"always  @(posedge clk or negedge rst_n)begin"
			"	if(!rst_n)begin"
			"		out1 <=1'b0      //初始化"
			"	end"
			"	else if(state_c==S1)begin"
			"		out1 <= 1'b1;"
			"	end"
			"	else begin"
			"		out1 <= 1'b0;"
			"	end"
			"end"
		],
		"description": "ztj"
	}

	"一个计数器": {
		"prefix": "jsq",
		"body": [
			"always @(posedge clk or negedge rst_n)begin"
			"	if(!rst_n)begin"
			"		cnt <= 0;"
			"	end"
			"	else if(add_cnt)begin"
			"		if(end_cnt)"
			"			cnt <= 0;"
			"		else"
			"			cnt <= cnt + 1;"
			"	end"
			"end"
			""
			"assign add_cnt = $1;       "
			"assign end_cnt = add_cnt && cnt== $2;   "
		],
		"description": "jsq"
	}

	"两个计数器": {
		"prefix": "jsq2",
		"body": [
			"always @(posedge clk or negedge rst_n)begin"
			"	if(!rst_n)begin"
			"		cnt0 <= 0;"
			"	end"
			"	else if(add_cnt0)begin"
			"		if(end_cnt0)"
			"			cnt0 <= 0;"
			"		else"
			"			cnt0 <= cnt0 + 1;"
			"	end"
			"end"
			""
			"assign add_cnt0 = $1;"
			"assign end_cnt0 = add_cnt0 && cnt0== $2;"
			""
			"always @(posedge clk or negedge rst_n)begin" 
			"	if(!rst_n)begin"
			"		cnt1 <= 0;"
			"	end"
			"	else if(add_cnt1)begin"
			"		if(end_cnt1)"
			"			cnt1 <= 0;"
			"		else"
			"			cnt1 <= cnt1 + 1;"
			"	end"
			"end"
			""
			"assign add_cnt1 = end_cnt0;"
			"assign end_cnt1 = add_cnt1 && cnt1== $3;"
		],
		"description": "jsq2"
	}
	
	"三个计数器": {
		"prefix": "jsq3",
		"body": [
			"always @(posedge clk or negedge rst_n)begin"
			"	if(!rst_n)begin"
			"		cnt0 <= 0;"
			"	end"
			"	else if(add_cnt0)begin"
			"		if(end_cnt0)"
			"			cnt0 <= 0;"
			"		else"
			"			cnt0 <= cnt0 + 1;"
			"	end"
			"end"
			""
			"assign add_cnt0 = $1;"
			"assign end_cnt0 = add_cnt0 && cnt0== $2;"
			""
			"always @(posedge clk or negedge rst_n)begin "
			"	if(!rst_n)begin"
			"		cnt1 <= 0;"
			"	end"
			"	else if(add_cnt1)begin"
			"		if(end_cnt1)"
			"			cnt1 <= 0;"
			"		else"
			"			cnt1 <= cnt1 + 1;"
			"	end"
			"end"
			""
			"assign add_cnt1 = end_cnt0;"
			"assign end_cnt1 = add_cnt1 && cnt1== $3;"
			""
			"always @(posedge clk or negedge rst_n)begin"
			"	if(!rst_n)begin"
			"		cnt2 <= 0;"
			"	end"
			"	else if(add_cnt2)begin"
			"		if(end_cnt2)"
			"			cnt2 <= 0;"
			"		else"
			"			cnt2 <= cnt2 + 1;"
			"	end"
			"end"
			""
			"assign add_cnt2 = end_cnt1;"
			"assign end_cnt2 = add_cnt2 && cnt2== $4;"
		],
		"description": "jsq3"
	}

	"一层时序电路": {
		"prefix": "shixu",
		"body": [
			"always  @(posedge clk or negedge rst_n)begin"
			"	 if(rst_n==1'b0)begin$1"
			"    end"
			"    else begin$2"
			"    end"
			"end"
		],
		"description": "shixu"
	}
	
	"两层时序电路": {
		"prefix": "shixu2",
		"body": [
			"always  @(posedge clk or negedge rst_n)begin"
			"	if(rst_n==1'b0)begin$1"
			"	end"
			"	else if()begin$2"
			"	end"
			"	else if()begin$3"
			"	end"
			"end"
		],
		"description": "shixu2"
	}

	"三层时序电路": {
		"prefix": "shixu3",
		"body": [
			"always  @(posedge clk or negedge rst_n)begin"
			"	if(rst_n==1'b0)begin$1"
			"	end"
			"	else if()begin$2"
			"	end"
			"	else if()begin$3"
			"	end"
			"	else if()begin$4"
			"	end"
			"end"
		],
		"description": "shixu3"
	}
	
	"一层组合逻辑": {
		"prefix": "zuhe",
		"body": [
			"always  @(*)begin$1"
			"end"
		],
		"description": "zuhe"
	}

	"两层组合逻辑": {
		"prefix": "zuhe2",
		"body": [
			"always  @(*)begin"
			"	if()begin$1"
			"	end"
			"	else begin$2"
			"	end"
			"end"
		],
		"description": "zuhe2"
	}

	"三层组合逻辑": {
		"prefix": "zuhe3",
		"body": [
			"always  @(*)begin"
			"	if()begin$1"
			"	end"
			"	else if()begin$2"
			"	end"
			"	else begin$3"
			"	end"
			"end"
		],
		"description": "zuhe3"
	}

	"四层组合逻辑": {
		"prefix": "zuhe4",
		"body": [
			"always  @(*)begin"
			"	if()begin$1"
			"	end"
			"	else if()begin$2"
			"	end"
			"	else if()begin$3"
			"	end"
			"	else begin$4"
			"	end"
			"end"
		],
		"description": "zuhe4"
	}

	"initial begin #1; end": {
		"prefix": "initial",
		"body": [
			"initial begin"
			"	#1;$1"
			"end"
		],
		"description": "initial"
	}
	
	"input ;": {
		"prefix": "input",
		"body": [
			"input                $1		;"
		],
		"description": "input"
	}
	
	"output ;": {
		"prefix": "output",
		"body": [
			"output               $1		;"
		],
		"description": "output"
	}
	
	"wire ;": {
		"prefix": "wire",
		"body": [
			"wire                 $1		;"
		],
		"description": "wire"
	}

	"reg ;": {
		"prefix": "reg",
		"body": [
			"reg                  $1		;"
		],
		"description": "reg"
	}

	"input [   DATA_W-1: 0] ;": {
		"prefix": "input1",
		"body": [
			"input   [   ${1:DATA_W-1}: 0]    $2		;"
		],
		"description": "input1"
	}
	
	"output [   DATA_W-1: 0] ;": {
		"prefix": "output1",
		"body": [
			"output  [   ${1:DATA_W-1}: 0]    $2		;"
		],
		"description": "output1"
	}
	
	"wire [   DATA_W-1: 0] ;": {
		"prefix": "wire1",
		"body": [
			"wire    [   ${1:DATA_W-1}: 0]    $2		;"
		],
		"description": "wire1"
	}

	"reg [   DATA_W-1: 0] ;": {
		"prefix": "reg1",
		"body": [
			"reg     [   ${1:DATA_W-1}: 0]    $2		;"
		],
		"description": "reg1"
	}
}
